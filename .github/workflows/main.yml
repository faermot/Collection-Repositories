name: Sync Repository Visibility

on:
  push:
    branches:
      - main  # Срабатывает при пуше в ветку main

jobs:
  sync_visibility:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x

    - name: Install Dependencies
      run: pip install requests markdown-it-py

    - name: Sync Repository Visibility
      env:
        GITHUB_TOKEN: "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"  # GitHub автоматически предоставляет токен
      run: |
          python - <<EOF
          import re
          import requests

          TOKEN = "${{ secrets.GITHUB_TOKEN }}"
          USER = "${{ github.repository_owner }}"
          MAIN_REPO = "${{ github.event.repository.name }}"
          HEADERS = {"Authorization": f"token {TOKEN}"}

          def extract_links_from_readme():
              """Извлекает все ссылки на GitHub-репозитории из README.md"""
              with open("README.md", "r", encoding="utf-8") as file:
                  content = file.read()

              repo_links = re.findall(r"https://github.com/[A-Za-z0-9_-]+/[A-Za-z0-9._-]+", content)
              repo_names = [link.split("/")[-1] for link in repo_links if USER in link]
              print(f"Найденные репозитории: {repo_names}")
              return repo_names

          def get_repository_visibility(repo_name):
              """Получает текущую видимость репозитория"""
              url = f"https://api.github.com/repos/{USER}/{repo_name}"
              response = requests.get(url, headers=HEADERS)
              print(f"Получение видимости {repo_name}: {response.status_code}, {response.json()}")
              return response.json().get("private", False)

          def set_repository_visibility(repo_name, is_private):
              """Устанавливает видимость репозитория"""
              url = f"https://api.github.com/repos/{USER}/{repo_name}"
              data = {"private": is_private}
              response = requests.patch(url, headers=HEADERS, json=data)
              print(f"Обновление видимости {repo_name} -> {'private' if is_private else 'public'}: {response.status_code}, {response.json()}")
              return response.status_code == 200

          def sync_repositories():
              """Основная функция синхронизации"""
              repo_names = extract_links_from_readme()
              main_repo_visibility = get_repository_visibility(MAIN_REPO)

              for repo_name in repo_names:
                  if set_repository_visibility(repo_name, main_repo_visibility):
                      print(f"Репозиторий {repo_name} успешно обновлен.")
                  else:
                      print(f"Не удалось обновить репозиторий {repo_name}.")

          sync_repositories()
          EOF
